class BubbPageFlip {
    constructor() {
        console.log('üöÄ BubbPageFlip starting...');
        this.currentPage = 0;
        this.isScrolling = false;
        this.lastScrollTime = 0;
        this.pages = null;
        this.totalPages = 0;
        this.init();
        console.log('‚úÖ BubbPageFlip initialized!');
    }
    
    init() {
        this.initPages();
        this.setupEventListeners();
        this.initAnimations();
        this.setupButtonListeners();
    }
    
    initPages() {
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        this.pages = document.querySelectorAll('.page-wrapper');
        this.totalPages = this.pages.length;
        
        // –ü–æ–∑–∏—Ü—ñ–æ–Ω—É—î–º–æ –≤—Å—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –æ–¥–Ω—É –ø–æ–≤–µ—Ä—Ö –æ–¥–Ω–æ—ó
        this.pages.forEach((page, index) => {
            page.style.position = 'absolute';
            page.style.top = '0';
            page.style.left = '0';
            page.style.width = '100%';
            page.style.height = '100%';
            
            if (index === 0) {
                page.style.display = 'block';
                page.style.zIndex = '10';
            } else {
                page.style.display = 'block'; // –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
                page.style.zIndex = String(this.totalPages - index); // –ù–∏–∂–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –º–∞—é—Ç—å –º–µ–Ω—à–∏–π z-index
            }
        });
        
        // –î–æ–¥–∞—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        this.addPageIndicator();
        
        console.log('üìñ Pages initialized with', this.totalPages, 'pages');
    }
    
    addPageIndicator() {
        const indicator = document.createElement('div');
        indicator.id = 'page-indicator';
        indicator.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(128, 128, 0, 0.9);
            color: white;
            padding: 10px 20px;
            border-radius: 25px;
            font-size: 16px;
            font-weight: bold;
            z-index: 1000;
            box-shadow: 0 4px 15px rgba(0,0,0,0.3);
            transition: all 0.3s ease-in-out;
        `;
        indicator.textContent = `Page ${this.currentPage + 1} / ${this.totalPages}`;
        document.body.appendChild(indicator);
    }
    
    setupEventListeners() {
        // –°–∫—Ä–æ–ª –¥–ª—è –ø–µ—Ä–µ–≥–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–æ–∫
        document.addEventListener('wheel', this.handleWheel.bind(this), { passive: false });
        
        // –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω—ñ —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è
        document.addEventListener('keydown', this.handleKeyboard.bind(this));
        
        // –ó–º—ñ–Ω–∞ —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–∫–Ω–∞
        window.addEventListener('resize', this.handleResize.bind(this));
    }
    
    handleWheel(e) {
        e.preventDefault();
        
        console.log('üñ±Ô∏è Scroll detected, delta:', e.deltaY);
        
        // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ —à–≤–∏–¥–∫–æ–º—É –ø–µ—Ä–µ–≥–æ—Ä—Ç–∞–Ω–Ω—é
        if (this.isScrolling) {
            console.log('‚è≥ Scroll blocked - animation in progress');
            return;
        }
        
        const delta = e.deltaY;
        const currentTime = Date.now();
        
        // –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ —Å–ø–∞–º—É —Å–∫—Ä–æ–ª—É
        if (currentTime - this.lastScrollTime < 800) {
            console.log('‚è≥ Scroll blocked - too fast');
            return;
        }
        this.lastScrollTime = currentTime;
        
        this.isScrolling = true;
        
        if (delta > 0) {
            // –°–∫—Ä–æ–ª –≤–Ω–∏–∑ - –Ω–∞—Å—Ç—É–ø–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
            console.log('‚¨áÔ∏è Scrolling down - next page');
            this.nextPage();
        } else {
            // –°–∫—Ä–æ–ª –≤–≥–æ—Ä—É - –ø–æ–ø–µ—Ä–µ–¥–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞
            console.log('‚¨ÜÔ∏è Scrolling up - prev page');
            this.prevPage();
        }
        
        // –î–æ–∑–≤–æ–ª—è—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Å–∫—Ä–æ–ª —á–µ—Ä–µ–∑ –ø–µ–≤–Ω–∏–π —á–∞—Å
        setTimeout(() => {
            this.isScrolling = false;
            console.log('‚úÖ Scroll unlocked');
        }, 3000);
    }
    
    handleKeyboard(e) {
        switch (e.key) {
            case 'ArrowDown':
            case 'ArrowRight':
            case ' ':
                e.preventDefault();
                this.nextPage();
                break;
            case 'ArrowUp':
            case 'ArrowLeft':
                e.preventDefault();
                this.prevPage();
                break;
        }
    }
    
    handleResize() {
        // –û–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–∫–Ω–∞
        console.log('üì± Window resized');
    }
    
    nextPage() {
        if (this.currentPage < this.totalPages - 1) {
            this.flipToPage(this.currentPage + 1);
        }
    }
    
    prevPage() {
        if (this.currentPage > 0) {
            this.flipToPage(this.currentPage - 1);
        }
    }
    
    flipToPage(targetPage) {
        if (targetPage < 0 || targetPage >= this.totalPages) {
            console.log('‚ùå Invalid page number:', targetPage);
            return;
        }
        
        console.log(`üîÑ Flipping from page ${this.currentPage} to page ${targetPage}`);
        
        const currentPageElement = this.pages[this.currentPage];
        const targetPageElement = this.pages[targetPage];
        const isForward = targetPage > this.currentPage;
        
        let animatingElement, staticElement;
        
        if (isForward) {
            // –ü—Ä–∏ –ø—Ä–æ–ª–∏—Å—Ç—É–≤–∞–Ω–Ω—ñ –≤–ø–µ—Ä–µ–¥ - –∞–Ω—ñ–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
            animatingElement = currentPageElement;
            staticElement = targetPageElement;
            // –¶—ñ–ª—å–æ–≤–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –≤–∂–µ –≤–∏–¥–∏–º–∞ –ø—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ—é
            targetPageElement.style.zIndex = '5';
            currentPageElement.style.zIndex = '100';
        } else {
            // –ü—Ä–∏ –ø—Ä–æ–ª–∏—Å—Ç—É–≤–∞–Ω–Ω—ñ –Ω–∞–∑–∞–¥ - –∞–Ω—ñ–º—É—î–º–æ –ü–û–ü–ï–†–ï–î–ù–Æ (—Ü—ñ–ª—å–æ–≤—É) —Å—Ç–æ—Ä—ñ–Ω–∫—É
            animatingElement = targetPageElement;
            staticElement = currentPageElement;
            // –ü–æ—Ç–æ—á–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –≤–∏–¥–∏–º–æ—é –ø—ñ–¥ –∞–Ω—ñ–º–æ–≤–∞–Ω–æ—é
            currentPageElement.style.zIndex = '5';
            targetPageElement.style.zIndex = '100';
        }
        
        console.log('üé¨ Starting page flip animation...', isForward ? 'FORWARD' : 'BACKWARD');
        
        // –î–æ–¥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –∫–ª–∞—Å –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó –ø–µ—Ä–µ–≥–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        const animationClass = isForward ? 'page-flipping' : 'page-flipping-back';
        animatingElement.classList.add(animationClass);
        console.log('‚úÖ Added', animationClass, 'class to:', animatingElement);
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –µ—Ñ–µ–∫—Ç –ø—ñ–¥–Ω—è—Ç—Ç—è –∫—É—Ç–∫–∞
        const cornerLift = document.createElement('div');
        cornerLift.className = 'corner-lift';
        animatingElement.appendChild(cornerLift);
        console.log('‚úÖ Added corner lift effect');
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç—É —Ç—ñ–Ω—å
        const shadow = document.createElement('div');
        shadow.className = 'page-flip-shadow';
        animatingElement.appendChild(shadow);
        console.log('‚úÖ Added shadow effect');
        
        // –ß–µ—Ä–µ–∑ —á–∞—Å –∞–Ω—ñ–º–∞—Ü—ñ—ó –∑–∞–≤–µ—Ä—à—É—î–º–æ –ø–µ—Ä–µ–≥–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        setTimeout(() => {
            // –û—á–∏—â—É—î–º–æ –∞–Ω—ñ–º–æ–≤–∞–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
            animatingElement.classList.remove('page-flipping');
            animatingElement.classList.remove('page-flipping-back');
            animatingElement.style.transform = ''; // –û—á–∏—â—É—î–º–æ transform
            
            // –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
            if (cornerLift.parentNode) cornerLift.remove();
            if (shadow.parentNode) shadow.remove();
            
            // –¶—ñ–ª—å–æ–≤–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —Å—Ç–∞—î –∞–∫—Ç–∏–≤–Ω–æ—é –ø–æ–≤–µ—Ä—Ö –≤—Å—ñ—Ö
            targetPageElement.style.zIndex = '10';
            
            // –û–Ω–æ–≤–ª—é—î–º–æ z-index –¥–ª—è –≤—Å—ñ—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫
            this.pages.forEach((page, index) => {
                if (index === targetPage) {
                    page.style.zIndex = '10'; // –ê–∫—Ç–∏–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
                } else if (index < targetPage) {
                    page.style.zIndex = '1'; // –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –≤–Ω–∏–∑—É
                } else {
                    page.style.zIndex = String(this.totalPages - index + 1); // –ù–∞—Å—Ç—É–ø–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –≤ –ø–æ—Ä—è–¥–∫—É
                }
            });
            
            console.log(`‚úÖ Page ${targetPage + 1} is now visible after animation`);
        }, 2500); // –ß–∞—Å –∞–Ω—ñ–º–∞—Ü—ñ—ó CSS (2.5 —Å–µ–∫—É–Ω–¥–∏)
        
        // –û–Ω–æ–≤–ª—é—î–º–æ currentPage —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
        setTimeout(() => {
            this.currentPage = targetPage;
            this.updatePageIndicator();
            
            // –ê–Ω—ñ–º—É—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–µ—Ä–µ–≥–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
            this.animatePageContent();
        }, 2500);
        
        console.log(`üé¨ Animation started for page ${targetPage + 1}`);
    }
    
    nextPageWithCornerEffect() {
        console.log('üîÑ nextPageWithCornerEffect called');
        
        if (this.currentPage < this.totalPages - 1) {
            this.showCornerLiftEffect('next');
            setTimeout(() => {
                this.flipToPage(this.currentPage + 1);
            }, 200);
        }
    }
    
    prevPageWithCornerEffect() {
        console.log('üîÑ prevPageWithCornerEffect called');
        
        if (this.currentPage > 0) {
            this.showCornerLiftEffect('prev');
            setTimeout(() => {
                this.flipToPage(this.currentPage - 1);
            }, 200);
        }
    }
    
    showCornerLiftEffect(direction) {
        const currentPageWrapper = document.querySelectorAll('.page-wrapper')[this.currentPage];
        if (!currentPageWrapper) return;
        
        console.log(`‚ú® Showing corner lift effect: ${direction}`);
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –µ—Ñ–µ–∫—Ç –ø—ñ–¥–Ω—è—Ç—Ç—è –∫—É—Ç–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≥–æ—Ä—Ç–∞–Ω–Ω—è–º
        const cornerPreview = document.createElement('div');
        cornerPreview.className = 'corner-lift';
        cornerPreview.style.cssText = `
            position: absolute;
            top: 0;
            right: 0;
            width: 80px;
            height: 80px;
            background: linear-gradient(135deg, transparent 40%, rgba(0,0,0,0.05) 45%, rgba(0,0,0,0.1) 50%, rgba(0,0,0,0.15) 55%, transparent 60%);
            transform-origin: top right;
            animation: cornerPreview 0.2s ease-out forwards;
            pointer-events: none;
            z-index: 15;
        `;
        
        // –î–æ–¥–∞—î–º–æ CSS –∞–Ω—ñ–º–∞—Ü—ñ—é –¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É
        const style = document.createElement('style');
        style.textContent = `
            @keyframes cornerPreview {
                0% { transform: rotateZ(0deg) scale(1); opacity: 0; }
                100% { transform: rotateZ(-3deg) scale(1.05); opacity: 0.8; }
            }
        `;
        document.head.appendChild(style);
        
        currentPageWrapper.appendChild(cornerPreview);
        
        // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–∏–π —á–∞—Å
        setTimeout(() => {
            if (cornerPreview.parentNode) cornerPreview.remove();
            if (style.parentNode) style.remove();
        }, 300);
    }
    
    animatePageContent() {
        // –ê–Ω—ñ–º—É—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ GSAP
        setTimeout(() => {
            const currentPageContent = document.querySelectorAll('.page-wrapper')[this.currentPage];
            if (currentPageContent) {
                const elements = currentPageContent.querySelectorAll('.feature-card, .stat-item, .purchase-card, .social-link');
                
                gsap.from(elements, {
                    duration: 0.8,
                    y: 30,
                    opacity: 0,
                    stagger: 0.1,
                    ease: 'power2.out'
                });
            }
        }, 300);
    }
    
    initAnimations() {
        // –ü–æ—á–∞—Ç–∫–æ–≤—ñ –∞–Ω—ñ–º–∞—Ü—ñ—ó –¥–ª—è –ø–µ—Ä—à–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        gsap.from('.coin-animation', {
            duration: 1,
            scale: 0,
            rotation: 360,
            ease: 'back.out(1.7)'
        });
        
        gsap.from('.main-title', {
            duration: 1.2,
            y: 50,
            opacity: 0,
            ease: 'power2.out',
            delay: 0.3
        });
        
        gsap.from('.subtitle', {
            duration: 1,
            y: 30,
            opacity: 0,
            ease: 'power2.out',
            delay: 0.6
        });
        
        gsap.from('.stat-item', {
            duration: 0.8,
            y: 40,
            opacity: 0,
            stagger: 0.2,
            ease: 'power2.out',
            delay: 0.9
        });
        
        gsap.from('.cta-button', {
            duration: 1,
            scale: 0.8,
            opacity: 0,
            ease: 'back.out(1.7)',
            delay: 1.5
        });
        
        // Scroll indicator –≤–∏–¥–∞–ª–µ–Ω–æ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ hover-–∑–æ–Ω–∏
    }
    
    setupButtonListeners() {
        // –ö–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏
        document.querySelectorAll('.cta-button, .purchase-button').forEach(btn => {
            btn.addEventListener('click', this.handlePurchaseClick.bind(this));
        });

        // –°–æ—Ü—ñ–∞–ª—å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        document.querySelectorAll('.social-link').forEach(link => {
            link.addEventListener('click', this.handleSocialClick.bind(this));
        });

        // –ü–æ–ª–µ –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏
        const input = document.querySelector('input[type="number"]');
        if (input) input.addEventListener('input', this.updateConversion.bind(this));
    }
    
    handlePurchaseClick(e) {
        e.preventDefault();
        gsap.to(e.target, {
            duration: 0.1,
            scale: 0.95,
            yoyo: true,
            repeat: 1
        });
        this.showNotification('Purchase function will be available soon!', 'info');
    }
    
    handleSocialClick(e) {
        e.preventDefault();
        const platform = e.currentTarget.querySelector('span').textContent;
        this.showNotification(`${platform} link will be available soon!`, 'info');
    }
    
    updateConversion(e) {
        const amount = parseFloat(e.target.value) || 0;
        const rate = 0.00042;
        const tokens = Math.floor(amount / rate);
        
        const conversionInfo = document.querySelector('.conversion-info span');
        if (conversionInfo) {
            conversionInfo.textContent = `‚âà ${tokens.toLocaleString()} BUBB`;
        }
    }
    
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <i class="fas fa-info-circle"></i>
                <span>${message}</span>
            </div>
        `;
        
        Object.assign(notification.style, {
            position: 'fixed',
            top: '20px',
            right: '20px',
            background: 'rgba(255, 255, 255, 0.1)',
            backdropFilter: 'blur(10px)',
            border: '1px solid rgba(255, 255, 255, 0.2)',
            borderRadius: '10px',
            padding: '1rem',
            color: 'white',
            zIndex: '1000',
            transform: 'translateX(100%)',
            transition: 'transform 0.3s ease'
        });
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);
        
        setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 3000);
    }
    
    updatePageIndicator() {
        const indicator = document.getElementById('page-indicator');
        if (indicator) {
            indicator.textContent = `Page ${this.currentPage + 1} / ${this.totalPages}`;
            
            // –î–æ–¥–∞—î–º–æ –≤—ñ–∑—É–∞–ª—å–Ω–∏–π –µ—Ñ–µ–∫—Ç –ø—Ä–∏ –∑–º—ñ–Ω—ñ
            indicator.style.transform = 'scale(1.2)';
            indicator.style.background = 'rgba(154, 205, 50, 0.9)';
            
            setTimeout(() => {
                indicator.style.transform = 'scale(1)';
                indicator.style.background = 'rgba(128, 128, 0, 0.9)';
            }, 200);
        }
    }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ Initializing Bubb PageFlip...');
    const app = new BubbPageFlip();
    
    // –ï—Ñ–µ–∫—Ç–∏ –¥–ª—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
    const initElementEffects = () => {
        // –ê–Ω—ñ–º–∞—Ü—ñ—è –º–æ–Ω–µ—Ç–∫–∏
        gsap.to('.coin-animation i', {
            duration: 3,
            rotation: 360,
            repeat: -1,
            ease: 'none'
        });
        
        // Hover –µ—Ñ–µ–∫—Ç–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        document.querySelectorAll('.cta-button, .purchase-button').forEach(btn => {
            btn.addEventListener('mouseenter', () => {
                gsap.to(btn, { duration: 0.3, scale: 1.05, boxShadow: '0 10px 25px rgba(154, 205, 50, 0.4)' });
            });
            
            btn.addEventListener('mouseleave', () => {
                gsap.to(btn, { duration: 0.3, scale: 1, boxShadow: '0 5px 15px rgba(154, 205, 50, 0.2)' });
            });
        });
        
        // Hover –µ—Ñ–µ–∫—Ç–∏ –¥–ª—è –∫–∞—Ä—Ç–æ–∫
        document.querySelectorAll('.feature-card, .purchase-card').forEach(card => {
            card.addEventListener('mouseenter', () => {
                gsap.to(card, { duration: 0.3, y: -5, boxShadow: '0 15px 35px rgba(0, 0, 0, 0.1)' });
            });
            
            card.addEventListener('mouseleave', () => {
                gsap.to(card, { duration: 0.3, y: 0, boxShadow: '0 5px 15px rgba(0, 0, 0, 0.05)' });
            });
        });
        
        // –ê–Ω—ñ–º–∞—Ü—ñ—è —Ü—ñ–Ω
        const animatePrice = () => {
            const price = document.querySelector('.current-price');
            if (price) {
                const currentPrice = parseFloat(price.textContent.replace('$', ''));
                const variation = (Math.random() - 0.5) * 0.00001;
                const newPrice = Math.max(0.0001, currentPrice + variation);
                
                gsap.to(price, {
                    duration: 0.5,
                    scale: 1.05,
                    color: variation > 0 ? '#4ade80' : '#ef4444',
                    onComplete: () => {
                        price.textContent = `$${newPrice.toFixed(5)}`;
                        gsap.to(price, {
                            duration: 0.5,
                            scale: 1,
                            color: '#333'
                        });
                    }
                });
            }
        };
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —Ü—ñ–Ω—É –∫–æ–∂–Ω—ñ 3 —Å–µ–∫—É–Ω–¥–∏
        setInterval(animatePrice, 3000);
    };
    
    initElementEffects();
});